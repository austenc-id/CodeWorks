import { Journal } from "../Journal.js";
import { Week } from "../Week.js";
import { Entry } from "../Entry.js";


export const journals = [
  new Journal(
    {name: "", week: 5}
  ),
  new Journal(
    {name: "", week: 4}
  ),
  new Journal(
    {name: "", week: 3}
  ),
  new Journal(
    {name: "", week: 2}
  ),
  new Journal(
    {name: "", week: 1}
  ),
]

export const weeks = [
  new Week (
    {week: 5, mon: '9-13-21', tues: '9-14-21', wed: '9-15-21', thurs: '9-16-21', quiz: 'quiz'}),
  new Week (
    {week: 4, mon: '9-6-21', tues: '9-7-21', wed: '9-8-21', thurs: '9-9-21', quiz: 'quiz'}),
  new Week (
    {week: 3, mon: '8-30-21', tues: '8-31-21', wed: '9-1-21', thurs: '9-2-21', quiz: 'quiz'}),
  new Week (
    {week: 2, mon: '8-23-21', tues: '8-24-21', wed: '8-25-21', thurs: '8-26-21', quiz: 'quiz'}),
  new Week (
    {week: 1, mon: '8-16-21', tues: '8-17-21', wed: '8-18-21', thurs: '8-19-21', quiz: 'quiz'}),
  ]

export const entries = [
  //SECTION Week 5
  //SECTION Week 4
    new Entry ({date: '9-6-21', title: 'Callback Hell', 
        q1:'What are some of the signs and causes of Callback Hell?',
        r1: 'When a developer tries to write synchronous JavaScript that executes from top to bottom using callbacks; it creates a messy and ineffective type of code.',
        q2: 'What does the asynchronous mean and how are callbacks involved?',
        r2: 'Asynchronous, in literal translation, means: not at the same time. Callbacks are used when requesting data from alternate sources (interally or externally).',
        q3: "",
        r3: "",
    }),
    new Entry ({date: '9-7-21', title: 'JavaScript Promises',
        q1:'What are the three states of a Promise?',
        r1: 'Pending, resolved, and rejected.',
        q2: 'How do promises seek to resolve the issues of "callback hell"?',
        r2: 'Chaining, by attaching Callbacks to Promises rather than passing them, (in theory) can stop callback hell before it starts.',
        q3: 'What is the difference between .then() and .catch()?',
        r3: 'Then is called when a Promise is resolved. Catch is when a Promise is rejected.',
    }),
    new Entry ({date: '9-8-21', title: 'Async and Await',
        q1:'What is the purpose of Async/Await?',
        r1: 'To abstract Promises making them easier to read and debug.',
        q2: 'What must you do in order to await a promise inside of a function?',
        r2: 'Define the function as async.',
        q3: 'What are some of the primary benefits of Async/Await?',
        r3: 'To the compiler async looks like synchronous code, making it easier to debug.',
      }),
    new Entry ({date: '9-9-21', title: 'REST',
        q1:'What does REST stand for, and in simple terms what does it mean?',
        r1: ' Representational State Transfer. It means when called on, the server will transfer a representation of the requested data.',
        q2: 'What does Stateless mean?',
        r2: 'Stateless means the server does not save any data about the user it interacts with.',
        q3: 'What URL pattern is used when writing a RESTful API?',
        r3: 'A URL that identifies the user and the HTTP method GET.',
    }),
    //SECTION Week 3
    new Entry ({date: '9-2-21', title: "",
        q1:'What problems does the Observer Pattern seek to solve?',
        r1: "",
        q2: 'What are the three mechanisms of the observer pattern?',
        r2: "",
        q3: 'Review the code generated from the bcw-template and reflect on the proxy objects from yesterday, and your understanding of the observer pattern today. With this knowledge, explain how the magic of the bcw-template uses these two concepts to manage and update the dom.',
        r3: "",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk3/04-ObserverPattern/#answer-the-following-questions',
        build: "",
    }),
    new Entry ({date: '9-1-21', title: "",
        q1:'What are the two common operations that we will set in the handler?',
        r1: "",
        q2: 'What do you have to make sure you are doing with every Get to insure the value does not become undefined?',
        r2: "",
        q3: 'What are some of the benefits of the proxy object that we are using in our structure for applications?',
        r3: "",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk3/03-Proxies/#answer-the-following-questions',
        build: "",
    }),
    new Entry ({date: '8-31-21', title: "",
        q1:'What is the purpose of Encapsulation?',
        r1: "",
        q2: 'What were some of the problems with closures and the underscore prefix?',
        r2: "",
        q3: 'How do we create private variables in a ES6 Class? Why would you do this?',
        r3: "",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk3/02-Encapsulation/#using-private-fields',
        build: "",
    }),
    new Entry ({date: '8-30-21', title: "",
        q1:'What problem does using exports solve?',
        r1: "",
        q2: 'How does export differ from export default?',
        r2: "",
        q3: 'What is a benefit of using the Module System?',
        r3: "",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk3/01-Modules/#conclusion',
        build: "",
    }),
    //SECTION Week 2
     new Entry ({date: '8-26-21', title: "Mistakes I'll Make as a Begginer Programmer",
        q1:'What are the benefits of making a plan before starting to just write the code?',
        r1: "Just like in every other aspect of life, planning code is a hedge against the biggest flaw in the human mind. We can't remember good. While some have an easier time than others, planning serves to record ideas and priorities so that the developer has a reference when problem solving in the thick of the coding process.",
        q2: 'How do you find answers when you are stuck?',
        r2: "Record Sources. Ask questions. Profit. Whether it's an instructor, peer, employer, book, website, or your friend's dog's pet turtle. Write down their name. Write down the question you asked them. Write down how helpful they were. No not as a burn book but more to guide you in your future struggles. The last thing I want to do when I'm confused is to try to figure out where to go for help. If I have a list of my previous intereactions I now have something to compare my current problem to and I can figure out who might be the best source to explain it to me in a way I understand. I'm more likely to go to MDN if I understand a concept, but need help with the syntax. However; I'd never go there first if I don't already know how something works. Likewise, if I need help from a TA or instructor, I'm going to try to get help from the one that I know is stronger in the particular realm I'm struggling through.",
        q3: 'From the entire article what are your biggest takeaways?',
        r3: "The world is constantly flinging large amounts of information at you and the only way to survive is to have a good filter. This filter will also probably stop some useful information as well. Knowing when to take down your defenses is key. Take note and learn you some stuff when the stakes are low, but never rely solely on instruction to learn. Experiment, make mistakes, prove your instructors to be right or wrong and in that way you'll understand why something is a mistake which allows you to prevent other possible mistakes before they ever happen.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk2/06-Coding-Mistakes/#answer-the-following-questions',
        build: "",
    }),
     new Entry ({date: '8-25-21', title: 'Chrome and Get Your Bugs',
        q1:'What are the main ways to write information to the console? Why/when should you use each style.',
        r1: "You can write useful data to the console preemptively or dynamically. When you write `console.log()` into your code you're telling the script that this is data that you're going to want to see as the process occurs. Writing it into the console itself can provide you with real time and non-permanent access to that same information. ",
        q2: 'Which tab allows you to see the breakdown of HTML/CSS and how can this tab be useful when debugging HTML?',
        r2: "The 'elements' tab will show you how your code is actually being rendered so that you can adjust your methodology to meet your expectations.",
        q3: 'Outside of writing everything to the console, what is a better way to debug your code?',
        r3: "To avoid cluttering your code and doing more work it's better to use the console only if you know where the problem lies and then only deliberately. Otherwise, you can use the built in debugging tools to help you isolate the issue and create a workable solution.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk2/03-Chrome-Dev-Tools/#opening-chrome-developer-tools',
        build: "",
    }),
     new Entry ({date: '8-24-21', title: 'High-Functioning Confusion',
        q1:'What are the three ways to syntactically write a function? What are the differences in how the function acts (if any)?',
        r1: "You can write a function in a few different ways. They primarily differ in their ability to handle complexity.Declared functions are the most robust, making them perfect for handling intricate and expansive meshes of conditions. This can also make them clunky and ill-suited for simple tasks. Expressing a function allows for efficiency and versatility. Basically they're shortcuts built in to JavaScript. Like all shortcuts if overused can cause bigger problems down the line. Arrow expressions are the shortcut to the shortcut. While they have utility they fall victim to the law of diminishing returns. If misused you're looking at a much more confusing debugging process without good documentation.",
        q2: 'What is the difference between Parameters and Arguments?',
        r2: "The way I like to imagine it, a function is your buddy. They're getting up to grab a beverage and they ask you if you want one. Sure, you could go for some iced tea. You let him know that the tea is in the kitchen, but the ice is in the ga(where your buddy is going to look for the things you asked for) and your arguments are the ice and tea. Parameters point the way and arguments identify the goal.",
        q3: 'What are higher order functions? Can you provide an example?',
        r3: "Basically, you heard that JavaScript likes functions so you put functions inside functions and they peppered them with more functions.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk2/02-Functions/#key-takeaways',
        build: "",
    }),
     new Entry ({date: '8-23-21', title: 'To var or not to var',
        q1:'What is Scope ?',
        r1: 'The scope of any declared variable in javascript determines where it can be referenced. A variable with a global scope can be called anywhere in the document it was declared in. A variable with a local scope can be called anywhere within the function it was declared in. A variable with a block scope can be called anywhere with the bounds of the `{}` it was declared in.',
        q2: 'What is Hoisting ?',
        r2: 'When a variable is redeclared or updated, javascript uses the hoisting process to move that change up to the original declaration.The type of variable affects how successful that process will be.',
        q3: 'In what cases might you use let vs const vs var?',
        r3: "The main difference between the 3 variables is integrity. Var has the lowest integrity which allows it to be versitile and corruptable. Const is the most strict allowing for reliability while limiting utility. 'Your goldy-locks' variable is let.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk2/01-Let-Var-Const/#const',
        build: "",
    }),
    //SECTION Week 1
    new Entry ({date: '8-19-21', title: "I Swear, Officer, I've been Wireframed",
        q1:'What is the purpose of wire-framing?',
        r1: 'A wireframe is used to create a game-plan. It allows the developer to break apart the material and get ready to produce a user-focused and well-defined website.',
        q2: 'What are the different levels of detail in wire-frames and why is each one useful?',
        r2: "low-fidelity: a basic visual representation. These will get you started in a focused and meaningful way.mid-fidelity: a more accurate representation still avoid distractions such as images or typography. These allow for both planning and reviewing as you progress through each stage of development. high-fidelity: a pixel-specific layout that may include actual featured images and relevant written content.These are less of a development tool and more a step-by-step guide. While the others are meant to provide room for creativity and uncertainty, this is the final deal. You know exactly what you want and now you need to make a functional version.",
        q3: 'Do you think wire-frames are worth the Time, Energy, and Effort that they require? Why or Why not?',
        r3: "Abolutely. Not. Well both. Wireframing is a tool and just like all tools it can be misused and counter-productive or it can help you reach a project's highest potential.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk1/06-Wireframing/#what-is-a-wireframe-and-who-uses-them',
        build: "",
    }),
    new Entry ({date: '8-18-21', title: "If You're Not Cheating at Design; You're Not Winning at Design",
        q1:'What is your favorite tip that you think is the most beneficial to improving your design?',
        r1: 'The most important thing for a developer to remember is form is function.',
        q2: 'Compile a couple resources that you think might be helpful when trying to review examples of good design ideas.',
        r2: "I don't think having a static list of examples is a good idea. When looking for inspiration in design I've found reflecting on sites that have made an impression on me personally then using a search engine while plugging in keywords and goals. This allows for unintentional diversity and perspective where relying on a set list can limit what a developer believes to be possible.",
        q3: 'How do you think good design influences people when visiting a website and what sorts of things could you convey through design alone?',
        r3: "Links don't matter if the reader doesn't notice them. Content can't matter if the reader finds it cumbersome to consume. Authenticity of won't matter if the reader loses trust in a poorly formatted website. Form is function and function is form.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk1/04-Cheating-at-Design/#not-every-button-needs-a-background-color',
        build: "",
    }),
    new Entry ({date: '8-17-21', title: "There's no 'z' in Boi-css-e",
        q1:'What is a Pseudo-Class and what are some of the most common ones you think you will use?',
        r1: "Things like hover and visited are standard on virtually every single website; while things like checked, any-link, and focus are used regularly but maybe aren't as universal.",
        q2: 'What is Specificity and how might you use it to your benefit?',
        r2: "At it's most basic level, a developer is someone who gives instructions to a computer. Specificity is just a *focused* example of this. Knowing the order and priority a application is going to apply code, allows a developer to be more accurate and efficient when writing files.",
        q3: 'What problems do you think you could run into if you over-utilized the !important feature?',
        r3: "Most people familiar with Classical Western History will know the fable of The Boy Who Cried Wolf. While dead sheep are *less* likely to be a consequence of !important overuse the general idea is the same. If everything is important nothing is important and the tool becomes basically useless.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk1/03-CSS/#css-specificity',
        build: "",
    }),
    new Entry ({date: '8-16-21', title: 'Git, Get, Got?',
        q1:'In your own words, why do we use Git?',
        r1: "Git is a version control manager. It's designed to preserve code at every stage of development.",
        q2: 'What are the benefits of having multiple branches?',
        r2: 'Creating new branches lets a development team assess multiple concepts, ideas, and solutions without damaging any previously successful code.',
        q3: 'What is the difference between Git and GitHub?',
        r3: "As the name implies Github is the online hub for a projects's Git repositories. It is a tool designed for teams to collaborate in an environment that requires a great deal of independant work.",
        link: 'https://codeworksacademy.com/fs-student-guide/resources/wk1/01-GIT/',
    }),
  ]
